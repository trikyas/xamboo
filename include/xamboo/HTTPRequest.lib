<?php

/* @DESCR -- Do not edit

WebAbility Base Version: >= 3
Module: Common
Language: >= PHP5 only
Creation: 09/Mar/2006
Copyright: Ing. Philippe Thomassigny (c) 2002-2006

-

@End_DESCR */

/* @UML_Box -- Do not edit
|------------------------------------------------------------------|
| HTTPRequest : Contains all HTTP request data                     |
|------------------------------------------------------------------|
|------------------------------------------------------------------|
|------------------------------------------------------------------|
@End_UML_Box */

class HTTPRequest extends WAClass
{
  private $_GET = null;
  private $_POST = null;
  private $_COOKIE = null;
  private $_EURL = null;
  private $headers;

  public $IP = null;
  public $HOST = null;
  public $METHOD = null;

  public function __construct()
  {
    parent::__construct();
    $this->doDebug("common/HTTPRequest->__construct()", WADebug::SYSTEM);

    $this->_GET = $_GET;
    $this->_POST = $_POST;
    $this->_COOKIE = $_COOKIE;
//    $this->_EURL = $this->decodeQueryString($this->base->decrypt(rawurldecode(str_replace(" ", "+", $this->getParameter("EURL")))));

    if (extension_loaded('apache'))
      $this->headers = getallheaders();
    if (extension_loaded('nsapi'))
      $this->headers = nsapi_request_headers();
    if (isset($_SERVER["HTTP_X_FORWARDED_FOR"]))
    {
      $this->IP = $_SERVER["HTTP_X_FORWARDED_FOR"];
      $this->HOST = null;
    }
    else
    {
      $this->IP = $_SERVER["REMOTE_ADDR"];
      $this->HOST = isset($_SERVER["REMOTE_HOST"])?$_SERVER["REMOTE_HOST"]:null;
    }
    // special case: PUT method with JSON parameters in BODY, because PHP does not supper by default PUT method
    // se we put the JSON body into _POST if available and correct syntax.
    $this->METHOD = strtoupper($_SERVER['REQUEST_METHOD']);
    if ($this->METHOD == 'PUT')
    {
      $putdata=file_get_contents('php://input');
      if ($putdata)
        $this->_POST = @json_decode($putdata, true);
    }
  }

  public function get_GET()
  {
    return $this->_GET;
  }

  public function get_POST()
  {
    return $this->_POST;
  }

  public function get_COOKIE()
  {
    return $this->_COOKIE;
  }

  public function get_EURL()
  {
    return $this->_EURL;
  }

  // ====================================================================
  // Parameters link
  // ====================================================================
  public function getParameter($P, $Type = Validator::ALL, $Query = null, $NotNull = false)
  { // the the variable for the user, first check POST (PRIORITY) then GET
    // if the variable doesnt exists, returns NULL
    $this->doDebug("common/HTTPRequest->getParameter($P, $Type, $Query, $NotNull)", WADebug::SYSTEM);

    if (isset($this->_POST[$P]))
    {
      if (Validator::checkVariable($this->_POST[$P], $Type, $Query, $NotNull))
      {
        return $this->_POST[$P];
      }
    }
    if ($P!="EURL" && isset($this->_EURL[$P]))
    {
      if (Validator::checkVariable($this->_EURL[$P], $Type, $Query, $NotNull))
      {
        return $this->_EURL[$P];
      }
    }
    if (isset($this->_GET[$P]))
    {
      if (Validator::checkVariable($this->_GET[$P], $Type, $Query, $NotNull))
      {
        return $this->_GET[$P];
      }
    }
    if ($NotNull)
      throw new BadVariableException("$P is null but should not.");
    return null;
  }

  public function getParameterGet($P, $Type = Validator::ALL, $Query = null, $NotNull = false)
  {
    $this->doDebug("common/HTTPRequest->getParameterGet($P, $Type, $Query, $NotNull)", WADebug::SYSTEM);

    // return the value of the GET variable exclusively
    if (isset($this->_GET[$P]))
    {
      if (Validator::checkVariable($this->_GET[$P], $Type, $Query, $NotNull))
      {
        return $this->_GET[$P];
      }
    }
    return null;
  }

  public function setParameterPost($P, $Val)
  {
    $this->_POST[$P] = $Val;
  }

  public function getParameterPost($P, $Type = Validator::ALL, $Query = null, $NotNull = false)
  {
    $this->doDebug("common/HTTPRequest->getParameterPost($P, $Type, $Query, $NotNull)", WADebug::SYSTEM);

    // return the value of the POST variable exclusively
    if (isset($this->_POST[$P]))
    {
      if (Validator::checkVariable($this->_POST[$P], $Type, $Query, $NotNull))
      {
        return $this->_POST[$P];
      }
    }
    return null;
  }

  public function getParameterEncrypted($P, $Type = Validator::ALL, $Query = null, $NotNull = false)
  {
    $this->doDebug("common/HTTPRequest->getParameterEncrypted($P, $Type, $Query, $NotNull)", WADebug::SYSTEM);

    // return the value of the Encrypted variable exclusively
    if (isset($this->_EURL[$P]))
    {
      if (Validator::checkVariable($this->_EURL[$P], $Type, $Query, $NotNull))
      {
        return $this->_EURL[$P];
      }
    }
    return null;
  }

  public function getCookie($C)
  {
    $this->doDebug("common/HTTPRequest->getCookie($C)", WADebug::SYSTEM);

    // return the value of the cookie
    if (isset($this->_COOKIE[$C]))
    {
      return $this->_COOKIE[$C];
    }
    return null;
  }


  public function decodeQueryString($str, $sep1 = "&", $sep2 = "=")
  {
    $this->doDebug("common/HTTPRequest->decodeQueryString($str)", WADebug::SYSTEM);

    $str = trim($str);
    if (!$str)
      return null;

    $r = array();
    $variables=explode($sep1,$str);
    for ($i=0;$i<count($variables);$i++)
    {
     $tab=explode($sep2,$variables[$i]);
     $r[$tab[0]]=(isset($tab[1])?rawurldecode($tab[1]):null);
    }
    return $r;
  }

  public function getAllHeaders()
  {
    return $this->headers;
  }

  public function getHeader($id)
  {
    if (isset($this->headers[$id]))
      return $this->headers[$id];
    return null;
  }

  // Browser capabilities and detection
  public function getBrowser()
  {
    $this->doDebug("common/Base_IO->getBrowser()", WADebug::SYSTEM);

    if (!isset($_SERVER["HTTP_USER_AGENT"]));
    {
      $this->browser = 1;
      $this->browserversion = "";
      return 1;
    }

    $HTTP_USER_AGENT = $_SERVER["HTTP_USER_AGENT"];
    if( eregi("(opera) ([0-9]{1,2}.[0-9]{1,3}){2,1}", $HTTP_USER_AGENT, $reg) ||
        eregi("(opera/)([0-9]{1,2}.[0-9]{1,3}){2,1}", $HTTP_USER_AGENT, $reg) )
    { // Opera
      $this->browser = 6;
      $this->browserversion = $reg[2];
    }
    elseif (eregi("(galeon/)([0-9]{1,2}.[0-9]{3,3}){0,1}", $HTTP_USER_AGENT, $reg) ||
            eregi("(konqueror)/([0-9]{1,2}.[2-9]{1,3})", $HTTP_USER_AGENT, $reg) ||
            eregi("(gecko)/([0-9]{1,8})", $HTTP_USER_AGENT, $reg) )
    { // Gecko (galeon, konqueror, netscape 9)
      $this->browser = 7;
      $this->browserversion = $reg[2];
    }
    elseif( eregi("(lynx)/([0-9]{1,2}.[2-9]{1,2}.[0-9]{1,2})", $HTTP_USER_AGENT, $reg) ||
            eregi("(links) \(([0-9]{3,2}.[0-9]{1,3})", $HTTP_USER_AGENT, $reg) )
    { // Text browsers
      $this->browser = 8;
      $this->browserversion = $reg[4];
    }
    elseif( eregi("(msie) ([0-9]{1,4}.[0-9]{1,3})", $HTTP_USER_AGENT, $reg) )
    { // microsoft IE
      if ($reg[2] < 4)
        $this->browser = 5;
      else
        $this->browser = 2;
      $this->browserversion = $reg[4];
    }
    elseif( eregi("(netscape8)/(6.[0-9]{1,3})", $HTTP_USER_AGENT, $reg) )
    { // netscape 8
      $this->browser = 3;
      $this->browserversion = $reg[4];
    }
    elseif( eregi("(mozilla)/([2-9]{1,2}.[0-9]{1,3})", $HTTP_USER_AGENT, $reg) )
    { // Netscape <= 6
      if ($reg[2] < 4)
        $this->browser = 5;
      else
        $this->browser = 4;
      $this->browserversion = $reg[2];
    }
    elseif( eregi("mozilla", $HTTP_USER_AGENT) )
    { // old browsers
      $this->browser = 5;
      $this->browserversion = "";
    }
    elseif( eregi("w3m", $HTTP_USER_AGENT) )
    { // old browser
      $this->browser = 5;
      $this->browserversion = "";
    }
    elseif( eregi("palm", $HTTP_USER_AGENT) )
    { // palm
      $this->browser = 10;
      $this->browserversion = "";
    }
    elseif( eregi("blackberry", $HTTP_USER_AGENT) )
    { // bb
      $this->browser = 12;
      $this->browserversion = "";
    }
    elseif( eregi("wap", $HTTP_USER_AGENT) )
    { // wap
      $this->browser = 11;
      $this->browserversion = "";
    }

    // HERE COMES THE OTHERS: BOTS, WEBTV,
    // ***** TO DO *****

    else
    { // others.... goes to default
      $this->browser = 1;
      $this->browserversion = "";
    }

    // Check for system type and version
    if( eregi("linux", $HTTP_USER_AGENT) )
    {
      $this->os = "Linux";
    }
    elseif(eregi("win32", $HTTP_USER_AGENT))
    {
      $this->os = "Windows";
    }
    elseif( eregi("(win)([0-9]{2})", $HTTP_USER_AGENT, $reg) ||
            eregi("(windows) ([0-9]{3})", $HTTP_USER_AGENT, $reg) )
    {
      $this->os = "Windows $reg[2]";
    }
    elseif( eregi("(winnt)([0-9]{1,3}.[0-9]{1,2}){0,1}", $HTTP_USER_AGENT, $reg) )
    {
      $this->os = "Windows NT $reg[3]";
    }
    elseif( eregi("(windows nt)( ){1,1}([0-9]{1,2}.[0-9]{1,2}){0,1}", $HTTP_USER_AGENT, $reg) )
    {
      $this->os = "Windows NT $reg[4]";
    }
    elseif( eregi("mac", $HTTP_USER_AGENT) )
    {
      $this->os = "Macintosh";
    }
    elseif( eregi("(sunos) ([0-9]{1,2}.[0-9]{1,2}){0,1}", $HTTP_USER_AGENT, $reg) )
    {
      $this->os = "SunOS $reg[2]";
    }
    elseif( eregi("(beos) r([0-9]{1,2}.[0-9]{1,2}){0,1}", $HTTP_USER_AGENT, $reg) )
    {
      $this->os = "BeOS $reg[2]";
    }
    elseif( eregi("freebsd", $HTTP_USER_AGENT) )
    {
      $this->os = "FreeBSD";
    }
    elseif( eregi("openbsd", $HTTP_USER_AGENT) )
    {
      $this->os = "OpenBSD";
    }
    elseif( eregi("irix", $HTTP_USER_AGENT) )
    {
      $this->os = "IRIX";
    }
    elseif( eregi("os/2", $HTTP_USER_AGENT) )
    {
      $this->os = "OS/2";
    }
    elseif( eregi("plan9", $HTTP_USER_AGENT) )
    {
      $this->os = "Plan9";
    }
    elseif( eregi("unix", $HTTP_USER_AGENT) ||
            eregi("hp-ux", $HTTP_USER_AGENT) )
    {
      $this->os = "Unix";
    }
    elseif( eregi("osf", $HTTP_USER_AGENT) )
    {
      $this->os = "OSF";
    }
    else
    {
      $this->os = "Unknown";
    }
/*
      }
      else
      { // Do not recognize: take default browser
        $this->browser = $this->defbrowser;
        $this->browserversion = "";
        $this->os = "Unknown";
      }
*/
      // 2. check if have to insert it
/*
      if ($this->GetConfig(67) == "Y")
      {
        if ($this->GetConfig(68) == "Y")
        {
          $sql = "insert into ebrowser (brokey, broname, broid, brostatus, brofather) ".
                 " values (0, '', '$HTTP_USER_AGENT', 'D', ".$this->browser.")";
        }
        else
        { // default
          $sql = "insert into ebrowser (brokey, broname, broid, brostatus, brofather) ".
                 " values (0, '', '$HTTP_USER_AGENT', 'D', 7)";
        }
        $cur->exec($sql);
        $cur->close();
      }
*/
/*
    }
    else
      $this->browser = $R[1];
*/
    return $this->browser;
  }

}

?>