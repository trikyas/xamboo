<?php

/* @DESCR -- Do not edit

Xamboo Base Version: >= 5
Module: Common
Language: >= PHP5 only
Creation: 01/May/2009
Copyright: Ing. Philippe Thomassigny (c) 2002-2009

-

WebAbility v5 Common Library and object
Input/Output for:
HTTPRequest, Response
Mail
Templates
Languages
DB


@End_DESCR */

/* @UML_Box -- Do not edit
|------------------------------------------------------------------|
| Base_IO : Common Input/Output for 'Base' objects                 |
|------------------------------------------------------------------|
|------------------------------------------------------------------|
|------------------------------------------------------------------|
@End_UML_Box */

class Base_Engine extends Singleton
{
  public $BASEDIR;         // directory of installation of webability
  public $PAGESDIR;        // directory of pages of the instance
  public $REPOSITORYDIR;   // directory of repository of the instance
  public $MASTERDIR;       // directory of master of instance if any
  public $ADMINDIR;        // directory of admin of instance if any
  public $SITEDIR;         // directory of site of instance if any
  public $CDNDIR;          // directory of cdn of instance if any
  public $GRAPHDIR;        // directory of graph of instance if any
  public $CACHE1DIR;       // directory of cache level 1: precompiled afos of pages
  public $CACHE2DIR;       // directory of cache level 2: full pages/block calculated 

  public $MASTERDOMAIN;    // domain of master of instance if any
  public $ADMINDOMAIN;     // domain of admin of instance if any
  public $SITEDOMAIN;      // domain of site of instance if any
  public $CDNDOMAIN;       // domain of cdn of instance if any:*
  public $GRAPHDOMAIN;     // domain of graph of instance if any

  public $PAGESCONTAINER;  // directory of pages of the instance
  
  // The data to search for instances
  public $SKIN;
  public $DefaultVersion;
  public $DefaultLanguage;
  public $Version;
  public $Language;

  public $AFOLOAD;     // Do we use AFO cache
  public $SHMLOAD;     // Do we use shared memory
  public $SHMSIZE;     // 10 megas
  public $SHMID;       // any arbitrary ID
  public $SHM = null;           // The shared memory for afo caches
  
  public $HTTPRequest = null;   // The HTTP request element (if web enabled)
  public $HTTPResponse = null;  // The HTTP response element (if web enabled)

  public $mainpage = 'home';    // name of main site page
  public $errorpage = 'error';  // name of error page (generally with a template)
  public $errorblock = 'errorblock';  // name of error block (just a red replacement div)
  
  public function __construct($config)
  {
    parent::__construct();
    WAObject::setBase($this);

    if (self::$debug || $this->localdebug)
      $this->doDebug("common/base/Base_Engine->__construct($config)", WADebug::SYSTEM);

    // basic engine config
    $this->BASEDIR = isset($config['BASEDIR'])?$config['BASEDIR']:null;
    $this->PAGESDIR = isset($config['PAGESDIR'])?$config['PAGESDIR']:null;
    $this->REPOSITORYDIR = isset($config['REPOSITORYDIR'])?$config['REPOSITORYDIR']:null;
    $this->MASTERDIR = isset($config['MASTERDIR'])?$config['MASTERDIR']:null;
    $this->ADMINDIR = isset($config['ADMINDIR'])?$config['ADMINDIR']:null;
    $this->SITEDIR = isset($config['SITEDIR'])?$config['SITEDIR']:null;
    $this->CDNDIR = isset($config['CDNDIR'])?$config['CDNDIR']:null;
    $this->GRAPHDIR = isset($config['GRAPHDIR'])?$config['GRAPHDIR']:null;
    $this->CACHE1DIR = isset($config['CACHE1DIR'])?$config['CACHE1DIR']:null;
    $this->CACHE2DIR = isset($config['CACHE2DIR'])?$config['CACHE2DIR']:null;

    $this->MASTERDOMAIN = isset($config['MASTERDOMAIN'])?$config['MASTERDOMAIN']:null;
    $this->ADMINDOMAIN = isset($config['ADMINDOMAIN'])?$config['ADMINDOMAIN']:null;
    $this->SITEDOMAIN = isset($config['SITEDOMAIN'])?$config['SITEDOMAIN']:null;
    $this->CDNDOMAIN = isset($config['CDNDOMAIN'])?$config['CDNDOMAIN']:null;
    $this->GRAPHDOMAIN = isset($config['GRAPHDOMAIN'])?$config['GRAPHDOMAIN']:null;

    $this->PAGESCONTAINER = isset($config['PAGESCONTAINER'])?$config['PAGESCONTAINER']:null;
    $this->SKIN = isset($config['SKIN'])?$config['SKIN']:null;

    $this->AFOLOAD = isset($config['AFOLOAD'])?$config['AFOLOAD']:false;
    
    $this->SHMLOAD = isset($config['SHMLOAD'])?$config['SHMLOAD']:false;
    $this->SHMSIZE = isset($config['SHMSIZE'])?$config['SHMSIZE']:null;
    $this->SHMID = isset($config['SHMID'])?$config['SHMID']:null;

    $this->DefaultVersion = isset($config['DefaultVersion'])?$config['DefaultVersion']:'base';
    $this->DefaultLanguage = isset($config['DefaultLanguage'])?$config['DefaultLanguage']:'en';
    $this->Version = isset($config['Version'])?$config['Version']:'base';
    $this->Language = isset($config['Language'])?$config['Language']:'en';

    $this->mainpage = isset($config['mainpage'])?$config['mainpage']:'home';
    $this->errorpage = isset($config['errorpage'])?$config['errorpage']:'error';
    $this->errorblock = isset($config['errorblock'])?$config['errorblock']:'errorblock';

    if (self::$htmlapi)
    {
      $this->HTTPRequest = new HTTPRequest();
      $this->HTTPResponse = new HTTPResponse();
    }

    // Do we put somewhere the size and ID of shared memory segment ?
    // by default: 20Mb, 10010
    // If we use PreBase, we DO NOT USE SHARED MEMORY: we are in installation process
    if (get_class($this) != 'PreBase' && $this->SHMLOAD)
    {
      try
      {
        $this->SHM = new WASHM($this->SHMSIZE, $this->SHMID);
      }
      catch (SHMError $e)
      {
        // no shared memory available (may happen)
        $this->SHM = null;
      }
    }
  }

  // ====================================================================
  // Applications
  // ====================================================================
  // Origin: The system search the template into [base]/components/[subdir]/applications/
  // Cache:  The system search the template into [repository]/applications/[subdir] if base app
  // Cache:  The system search the template into [repository]/applications/modules/[subdir] if module app
  public function loadApplication($application, $component = null)
  {
    if (self::$debug || $this->localdebug)
      $this->doDebug("common/base/Base_IO->loadApplication($application, $component)", WADebug::SYSTEM);

    if ($component === null)
      $component = $this->COMPONENT;

    if (isset($this->applications["$component.$application"]))
      return $this->applications["$component.$application"];

    if ($component == 'site')
    {
      $basedir = $this->REPOSITORYDIR.'pages/'.$application;
    }
    else
    {
      if (!isset($this->basecomponents[$component]))
        $basedir = $this->BASEDIR.'/cartridges/'.$this->getModulePath($component);
      else
        $basedir = $this->BASEDIR.'/components/'.$component;
    }

    $app = new TemplateSource(
      new FileSource($basedir, 'applications', $application.'.xml'),
      new FastObjectSource(
        new FileSource($this->REPOSITORYDIR, 'templates/'.(isset($this->basecomponents[$component])?'':'modules/').$component, "application.$application.afo", true),
        $this->SHM?new SHMSource("application.$application.afo", $this->SHM):null
      )
    );

    $this->applications["$component.$application"] = $app;
    return $app->read();
  }

  // ==================
  // HTML basic Methods
  // ==================
  public function htmlEntities($string)
  {
    // apply the htmlentities function to string, using the current charset
    return htmlentities($string, ENT_COMPAT, $this->CharSet);
  }

  // ==================
  // FAST OBJECTS
  // ==================
  public function getFastObject($type, $name, $useSHM = false)
  {
    $this->doDebug("common/Base_IO->getFastObject($type,$name,$useSHM)", WADebug::SYSTEM);

    $afo = new FastObjectSource(
        new FileSource($this->REPOSITORYDIR, $type, $name.'.afo', true),
        $this->SHM?new SHMSource($this->REPOSITORYDIR.$type.'/'.$name.'.afo', $this->SHM):null
    );

    return $afo;
  }

  public function readFastObject($type, $name, $useSHM = false)
  {
    $this->doDebug("common/Base_IO->readFastObject($type,$name,$useSHM)", WADebug::SYSTEM);

    $afo = $this->getFastObject($type, $name, $useSHM);
    return $afo->read();
  }


  public function writeFastObject($type, $name, $data, $useSHM = false)
  {
    $this->doDebug("common/Base_IO->writeFastObject($type, $name, $data, $useSHM)", WADebug::SYSTEM);

    $afo = $this->getFastObject($type, $name, $useSHM);
    $afo->write($data);
  }

  // ====================================================================
  // Get the Directory for dominion files and template definition files
  // ====================================================================
  public function getTemplateDir()
  {
    $this->doDebug("common/Base_IO->getTemplateDir()", WADebug::SYSTEM);

    if ($this->COMPONENT == "master")
      return $this->BASEDIR."/master/site/skins/".$this->TemplateSkin."/";
    if ($this->COMPONENT == "generator")
      return $this->BASEDIR."/generator/site/skins/".$this->TemplateSkin."/";

    if ($this->COMPONENT == "site")
      return $this->SITEDIR."skins/".$this->TemplateSkin."/";
    if ($this->COMPONENT == "admin")
      return $this->ADMINDIR."skins/".$this->TemplateSkin."/";
    return "";
  }

  // ====================================================================
  // Type of browser checker
  // ====================================================================
  public function getBrowser()
  {
    $this->doDebug('common/Base_IO->getBrowser()', WADebug::SYSTEM);

    if (!isset($_SERVER['HTTP_USER_AGENT']));
    {
      $this->browser = 'generic';
      $this->browserversion = '';
      return 'generic';
    }

    $HTTP_USER_AGENT = $_SERVER['HTTP_USER_AGENT'];
    if( eregi("(opera) ([0-9]{1,2}.[0-9]{1,3}){2,1}", $HTTP_USER_AGENT, $reg) ||
        eregi("(opera/)([0-9]{1,2}.[0-9]{1,3}){2,1}", $HTTP_USER_AGENT, $reg) )
    { // Opera
      $this->browser = 6;
      $this->browserversion = $reg[2];
    }
    elseif (eregi("(galeon/)([0-9]{1,2}.[0-9]{3,3}){0,1}", $HTTP_USER_AGENT, $reg) ||
            eregi("(konqueror)/([0-9]{1,2}.[2-9]{1,3})", $HTTP_USER_AGENT, $reg) ||
            eregi("(gecko)/([0-9]{1,8})", $HTTP_USER_AGENT, $reg) )
    { // Gecko (galeon, konqueror, netscape 9)
      $this->browser = 7;
      $this->browserversion = $reg[2];
    }
    elseif( eregi("(lynx)/([0-9]{1,2}.[2-9]{1,2}.[0-9]{1,2})", $HTTP_USER_AGENT, $reg) ||
            eregi("(links) \(([0-9]{3,2}.[0-9]{1,3})", $HTTP_USER_AGENT, $reg) )
    { // Text browsers
      $this->browser = 8;
      $this->browserversion = $reg[4];
    }
    elseif( eregi("(msie) ([0-9]{1,4}.[0-9]{1,3})", $HTTP_USER_AGENT, $reg) )
    { // microsoft IE
      if ($reg[2] < 4)
        $this->browser = 5;
      else
        $this->browser = 2;
      $this->browserversion = $reg[4];
    }
    elseif( eregi("(netscape8)/(6.[0-9]{1,3})", $HTTP_USER_AGENT, $reg) )
    { // netscape 8
      $this->browser = 3;
      $this->browserversion = $reg[4];
    }
    elseif( eregi("(mozilla)/([2-9]{1,2}.[0-9]{1,3})", $HTTP_USER_AGENT, $reg) )
    { // Netscape <= 6
      if ($reg[2] < 4)
        $this->browser = 5;
      else
        $this->browser = 4;
      $this->browserversion = $reg[2];
    }
    elseif( eregi("mozilla", $HTTP_USER_AGENT) )
    { // old browsers
      $this->browser = 5;
      $this->browserversion = "";
    }
    elseif( eregi("w3m", $HTTP_USER_AGENT) )
    { // old browser
      $this->browser = 5;
      $this->browserversion = "";
    }
    elseif( eregi("palm", $HTTP_USER_AGENT) )
    { // palm
      $this->browser = 10;
      $this->browserversion = "";
    }
    elseif( eregi("blackberry", $HTTP_USER_AGENT) )
    { // bb
      $this->browser = 12;
      $this->browserversion = "";
    }
    elseif( eregi("wap", $HTTP_USER_AGENT) )
    { // wap
      $this->browser = 11;
      $this->browserversion = "";
    }

    // HERE COMES THE OTHERS: BOTS, WEBTV,
    // ***** TO DO *****

    else
    { // others.... goes to default
      $this->browser = 'generic';
      $this->browserversion = "";
    }

    // Check for system type and version
    if( eregi("linux", $HTTP_USER_AGENT) )
    {
      $this->os = "Linux";
    }
    elseif(eregi("win32", $HTTP_USER_AGENT))
    {
      $this->os = "Windows";
    }
    elseif( eregi("(win)([0-9]{2})", $HTTP_USER_AGENT, $reg) ||
            eregi("(windows) ([0-9]{3})", $HTTP_USER_AGENT, $reg) )
    {
      $this->os = "Windows $reg[2]";
    }
    elseif( eregi("(winnt)([0-9]{1,3}.[0-9]{1,2}){0,1}", $HTTP_USER_AGENT, $reg) )
    {
      $this->os = "Windows NT $reg[3]";
    }
    elseif( eregi("(windows nt)( ){1,1}([0-9]{1,2}.[0-9]{1,2}){0,1}", $HTTP_USER_AGENT, $reg) )
    {
      $this->os = "Windows NT $reg[4]";
    }
    elseif( eregi("mac", $HTTP_USER_AGENT) )
    {
      $this->os = "Macintosh";
    }
    elseif( eregi("(sunos) ([0-9]{1,2}.[0-9]{1,2}){0,1}", $HTTP_USER_AGENT, $reg) )
    {
      $this->os = "SunOS $reg[2]";
    }
    elseif( eregi("(beos) r([0-9]{1,2}.[0-9]{1,2}){0,1}", $HTTP_USER_AGENT, $reg) )
    {
      $this->os = "BeOS $reg[2]";
    }
    elseif( eregi("freebsd", $HTTP_USER_AGENT) )
    {
      $this->os = "FreeBSD";
    }
    elseif( eregi("openbsd", $HTTP_USER_AGENT) )
    {
      $this->os = "OpenBSD";
    }
    elseif( eregi("irix", $HTTP_USER_AGENT) )
    {
      $this->os = "IRIX";
    }
    elseif( eregi("os/2", $HTTP_USER_AGENT) )
    {
      $this->os = "OS/2";
    }
    elseif( eregi("plan9", $HTTP_USER_AGENT) )
    {
      $this->os = "Plan9";
    }
    elseif( eregi("unix", $HTTP_USER_AGENT) ||
            eregi("hp-ux", $HTTP_USER_AGENT) )
    {
      $this->os = "Unix";
    }
    elseif( eregi("osf", $HTTP_USER_AGENT) )
    {
      $this->os = "OSF";
    }
    else
    {
      $this->os = "Unknown";
    }
/*
      }
      else
      { // Do not recognize: take default browser
        $this->browser = $this->defbrowser;
        $this->browserversion = "";
        $this->os = "Unknown";
      }
*/
      // 2. check if have to insert it
/*
      if ($this->GetConfig(67) == "Y")
      {
        if ($this->GetConfig(68) == "Y")
        {
          $sql = "insert into ebrowser (brokey, broname, broid, brostatus, brofather) ".
                 " values (0, '', '$HTTP_USER_AGENT', 'D', ".$this->browser.")";
        }
        else
        { // default
          $sql = "insert into ebrowser (brokey, broname, broid, brostatus, brofather) ".
                 " values (0, '', '$HTTP_USER_AGENT', 'D', 7)";
        }
        $cur->exec($sql);
        $cur->close();
      }
*/
/*
    }
    else
      $this->browser = $R[1];
*/
    return $this->browser;
  }

  // ====================================================================
  // Calculate the time in millisec for beautiful presentation
  // ====================================================================
  public function _calculatemicrotime($m)
  {
    $this->doDebug("common/Base_IO->_calculatemicrotime($m)", WADebug::SYSTEM);

    if (!$m)
      return 0;
    list($usec, $sec) = explode(" ",$m);
    return ((float)$usec + (float)$sec) * 1000;
  }

  public function calculatePureTime($b, $e)
  {
    $this->doDebug("common/Base_IO->calculatePureTime($b, $e)", WADebug::SYSTEM);

    return $this->_calculatemicrotime($e) - $this->_calculatemicrotime($b);
  }

  public function calculateTime($b, $e)
  {
    $this->doDebug("common/Base_IO->calculateTime($b, $e)", WADebug::SYSTEM);

    return $this->calculatePureTime($b, $e) . " ms";
  }


  // ====================================================================
  // Basic functions
  // ====================================================================
  public function getSystem()
  {
    $this->doDebug("common/Base_IO->getSystem()", WADebug::SYSTEM);

    return "WebAbility&reg; ";
  }

  public function getVersion()
  {
    $this->doDebug("common/Base_IO->getVersion()", WADebug::SYSTEM);

    return $this->VERSION;
  }

  public function getCopyright()
  {
    $this->doDebug("common/Base_IO->getCopyright()", WADebug::SYSTEM);

    return "(c) 1999-2011 Philippe Thomassigny.";
  }

  public function getURLSite()
  {
    $this->doDebug("common/Base_IO->getURLSite()", WADebug::SYSTEM);

    $prot = $_SERVER["SERVER_PROTOCOL"];
    if (substr($prot, 0, 5) == "HTTP/")
    {
      $protocol = "http://";
      $defport = 80;
    }
    elseif (substr($prot, 0, 5) == "HTTPS")
    {
      $protocol = "https://";
      $defport = 443;
    }
    else
    {
      return null;  // We dont know this protocol !!!
    }
    if ($_SERVER["SERVER_PORT"] == $defport)
      $port = "";
    else
      $port = ":".$_SERVER["SERVER_PORT"];

    return $protocol . $_SERVER["SERVER_NAME"] . $port;
  }

  public function getSite()
  {
    $this->doDebug("common/Base_IO->getSite()", WADebug::SYSTEM);

    return $this->getURLSite();
  }

  // Cache File deletion (reg exp on name)
  public function delCache($dir, $name, $recursive = false)
  {
    $this->doDebug("common/Base_IO->delCache($dir, $name, $recursive)", WADebug::SYSTEM);

    $reg = "/$name/i";
    if (!is_dir($dir))
      return;
    if ($handle = opendir($dir))
    {
      while ($file = readdir($handle))
      {
        if ($file != "." && $file != ".." && is_file($dir."/".$file) && preg_match($reg, $file))
        {
          unlink($dir."/".$file);
        }
        if ($file != "." && $file != ".." && is_dir($dir."/".$file))
        {
          $this->delCache($dir."/".$file, $name, $recursive);
        }
      }
      closedir($handle);
    }
    // check memory SHM cache

// ***********

  }

  // MAIL functions
  // If $from contains a NAME <MAIL> so you MUST pass $f too no to gather errors on sendmail
  public function sendTextMail($title, $body, $to, $from, $replyto, $f = null)
  {
    if (!$this->Mail)
      $this->Mail = new Mail();

    $this->Mail->sendSimpleTextMail($title, $body, $to, $from, $replyto);
  }

  // If $from contains a NAME <MAIL> so you MUST pass $f too no to gather errors on sendmail
  public function sendHTMLMail($title, $body, $to, $from, $replyto, $f = null)
  {
    if (!$this->Mail)
      $this->Mail = new Mail();

    $this->Mail->sendSimpleHTMLMail($title, $body, $to, $from, $replyto);
  }

  // SECURITY AND HASH FUNCTIONS
  // ======================================================
  // CreateKey: Create a unique random Key alphanum case
  //            sensitive based
  // ======================================================
  public function createKey($large, $unique = null)
  {
    $this->doDebug("common/Base_IO->createKey($large, $unique)", WADebug::SYSTEM);

    srand((double)microtime()*1000000);
    $_Key = "";
    for ($i=0;$i<$large;$i++)
    { $j=($unique!==null?$unique:rand()%3); // we use % rather than limits because of a bug on some Unixes
      switch($j)
      { case 0: $_Key .= chr(48+rand()%10); break;
        case 1: $_Key .= chr(65+rand()%26); break;
        case 2: $_Key .= chr(97+rand()%26); break;
      } // switch
    } // for
    return $_Key;
  } // CreateKey()

  // GENERAL PURPOSE FUNCTION
  // ======================================================
  // toIndexedArray: transform the array with a key based on a record field
  // ======================================================
  public function toIndexedArray($array, $key)
  {
    $newarray = array();
    if (is_array($array))
      foreach($array as $a)
        $newarray[$a[$key]] = $a;
    return $newarray;
  }

}

?>